<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Attention机制</title>
    <link href="/2020/08/30/Attention%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/08/30/Attention%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="两种注意力机制"><a href="#两种注意力机制" class="headerlink" title="两种注意力机制"></a>两种注意力机制</h1><p>​        在神经学中的注意力机制通常有两种，一种是聚焦式注意力机制（Fcous Attention），这种注意力机制指的是主动有意识的将聚焦于某一对象的注意力。另一种是自下而上的无意识的注意力机制，称为基于显著性的注意力机制（Saliency-Based Attention），这种注意力机制是无意识的，当有外界刺激时，才会去注意。一个例子就是<strong>鸡尾酒会效应</strong>，当一个人在吵闹的鸡尾酒会上和朋友聊天时，即使周围很吵闹干扰很多，他还是可以听到朋友说话的内容，这就是聚焦式注意力机制；但是当有人突然叫他的名字，他也能反应过来，这种就是无意识的基于显著性的注意力。</p><p>​        我们希望神经网络能够模仿人的注意力的机制，在下面的介绍中，默认指的是聚焦式的注意力机制，我们希望神经网络能够关注到我们给他指定的信息。</p><h1 id="注意力机制的基本原理"><a href="#注意力机制的基本原理" class="headerlink" title="注意力机制的基本原理"></a>注意力机制的基本原理</h1><h2 id="Soft-Attention模型"><a href="#Soft-Attention模型" class="headerlink" title="Soft Attention模型"></a>Soft Attention模型</h2><p> <img src="/images/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6-1.png" alt="preview"></p><p>这里的一个场景是：翻译句子“ Tom chase Jerry ”成“汤姆追逐杰瑞”，由上图可以看到我们希望的是当我们翻译X_1=tom时，那么需要将Y_1注意到X_1这里，当翻译X_2=chase，Y_2=追逐就需要注意到X_2，如果Encoder仅仅输出一个数值，那么对于Decoder来说，Tom chase Jerry是相同分量的东西，这样效果可能就会不好。下面是目标句子中每个单词生成的过程：<br>$$<br>y_1 = f(C_1)<br>$$<br>$$<br>y_2 = f(C_2,y_1) \<br>$$<br>$$<br>y_3 = f(C_3, y_1, y_2)<br>$$<br>其中f是非线性函数，可以用RNN来代替。这里使用注意力概率分布来指代当前注意力集中的大小。对于英汉翻译来说，下面的公式表示了注意力概率分布。<br>$$<br>C_{汤姆}=g(0.6\times f1(“Tom”), 0.2\times f1(“Chase”), 0.2\times f1(“Jerry”))  \<br>$$<br>$$<br>C_{追逐}=g(0.2\times f1(“Tom”), 0.7\times f1(“Chase”), 0.1\times f1(“Jerry”))  \<br>$$<br>$$<br>C_{杰瑞}=g(0.3\times f1(“Tom”), 0.2\times f1(“Chase”), 0.5\times f1(“Jerry”))<br>$$<br>其中f1表示Encoder对英文单词做的某些变换，可以是RNN模型中，隐藏状态h。g实际上做的运算就是加权求和，但是具体到这个场景中就是Encoder根据单词的中间表示合成整个句子中间语义表示的变换函数，公式如下：<br>$$<br>C_i = \sum^{Lx}_{j=1}h_ja_{ij}<br>$$<br>Lx表示输入句子Source的长度，a_ij表示在Target输出第i个单词时，Source输入句子中第j个单词的注意力分配系数，而h_j表示Source输入句子中第j个单词的语义编码。假设下标i就是上面例子所说的“Chase”，那么Lx就是3，h1=f(“Tom”),h2=f(“Chase”),h3=f(“Jerry”)分别是输入句子中每个单词的语义编码，对应的注意力权值分别是0.6，0.2，0.2。下图是C_i的运算过程。</p><p><img src="/images/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6-2.jpg"><br>现在稍作总结，我们需要根据不同的目标变换我们的注意力，也就是C_i，而C是由Source中每个单词的语义编码乘上对应的权值，并将所有单词相加得来的，语义编码可以由RNN等模型来做，现在问题是如何求得每个单词的注意力权值，这就引入了注意力分布的概念，利用注意力分布来求出每个单词的注意力权值。</p><h2 id="注意力分布"><a href="#注意力分布" class="headerlink" title="注意力分布"></a>注意力分布</h2><p>这里不限定场景，就是从N个输入向量[x_1, …, x_N]中选择出和某个特定任务相关的信息，需要引入一个和任务相关的表示，称为查询向量（Query Vector），通过一个打分函数来计算每一个输入向量和查询向量之间的相关性。这里的查询向量类似于上面的我们从Target中取出的“Tom”。注意力变量z表示在Source中被选择用来计算注意力权值的索引，z=i表示选择了第i个输入向量。首先计算在给定X和q的情况下，选择第i个输入向量的概率a_i.<br>$$a_i = p(z=i|X,q) $$<br>$$= softmax(s(x_i, q)) $$<br>$$= \frac{exp(s(x_i, q))}{\sum^{N}_{j=1}exp(s(x_j, q))}$$<br>其中a_i称为注意力分布（Attention Distribution），s（x_i， q）为注意力打分函数。也就是说我们拿Target中的汤姆来一一和输入向量中的“Tom”，“Chase”，“Jerry”来做打分，最后计算每个单词与汤姆的概率，概率大的说明权重就大。这里打分函数有以下4种。<br>$$<br>加性模型\qquad s(x_i, q)=v^Ttanh(Wx_i+Uq)<br>$$<br>$$<br>点积模型\qquad s(x_i, q)=x_i^Tq\qquad\qquad\qquad\quad\<br>$$<br>$$<br>缩放点积模型\qquad s(x_i, q)=\frac{x_i^Tq}{\sqrt{d}}\qquad\qquad\quad\<br>$$<br>$$<br>双线性模型\qquad s(x_i, q) = x_i^TWq\qquad\qquad\quad\<br>$$<br>其中W，U，v为可学习的参数，d为输入向量的维度。点积模型更好的利用矩阵乘积，计算效率更高。但当输入向量的维度d比较高时，点积模型的值通常有比较大的方差，从而导致softmax函数的梯度较小，缩放点积可以较好地处理这个问题。</p><p><strong>加权平均</strong>注意力分布a_i可以解释为在给任务相关的查询q时，第i个输入向量受关注的程度。我们采用一个中“软性”的信息机制对输入信息进行汇总。<br>$$<br>att(X, q) = \sum^{N}_{i=1}a_ix_i<br>$$<br>上述公式就是软性注意力机制（Soft Attention Mechanism），下面给出软性注意力机制的示例。</p><p><img src="/images/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6-3.png"></p><h2 id="注意力机制的变体"><a href="#注意力机制的变体" class="headerlink" title="注意力机制的变体"></a>注意力机制的变体</h2><p>键值对注意力</p><p>参考：<br><a href="https://blog.csdn.net/hpulfc/article/details/80448570">https://blog.csdn.net/hpulfc/article/details/80448570</a><br><a href="https://blog.csdn.net/hpulfc/article/details/80449561">https://blog.csdn.net/hpulfc/article/details/80449561</a><br><a href="https://blog.csdn.net/jesseyule/article/details/101633159">https://blog.csdn.net/jesseyule/article/details/101633159</a><br>《神经网络与深度学习》</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Attention</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch官方文档之torch.Tensor</title>
    <link href="/2020/05/16/PyTorch%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%B9%8Btorch-Tensor/"/>
    <url>/2020/05/16/PyTorch%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%B9%8Btorch-Tensor/</url>
    
    <content type="html"><![CDATA[<p>torch分别定义了CPU中存储和GPU中存储的两种类型.</p><a id="more"></a><table><thead><tr><th>Data type</th><th>dtype</th><th>CPU tensor</th><th>GPU tensor</th></tr></thead><tbody><tr><td>32-bit floating point</td><td>torch.float32 or torch.float</td><td>torch.FloatTensor</td><td>torch.cuda.FloatTensor</td></tr><tr><td>64-bit floating point</td><td>torch.float64 or torch.double</td><td>torch.DoubleTensor</td><td>torch.cuda.DoubleTensor</td></tr><tr><td>16-bit floating point</td><td>torch.float16 or torch.half</td><td>torch.HalfTensor</td><td>torch.cuda.HalfTensor</td></tr><tr><td>8-bit integer (unsigned)</td><td>torch.uint8</td><td>torch.ByteTensor</td><td>torch.cuda.ByteTensor</td></tr><tr><td>8-bit integer (signed)</td><td>torch.int8</td><td>torch.CharTensor</td><td>torch.cuda.CharTensor</td></tr><tr><td>16-bit integer (signed)</td><td>torch.int16 or torch.short</td><td>torch.ShortTensor</td><td>torch.cuda.ShortTensor</td></tr><tr><td>32-bit integer (signed)</td><td>torch.int32 or torch.int</td><td>torch.IntTensor</td><td>torch.cuda.IntTensor</td></tr><tr><td>64-bit integer (signed)</td><td>torch.int64 or torch.long</td><td>torch.LongTensor</td><td>torch.cuda.LongTensor</td></tr><tr><td>Boolean</td><td>torch.bool</td><td>torch.BoolTensor</td><td>torch.cuda.BoolTensor</td></tr><tr><td>torch.Tensor()等于就是torch.FloatTensor()</td><td></td><td></td><td></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</code></pre><pre><code class="hljs python">a = torch.Tensor(<span class="hljs-number">1</span>) <span class="hljs-comment"># torch.Tensor()就是默认数据类型为torch.FloatTensor()的张量</span>b = torch.FloatTensor(<span class="hljs-number">1</span>)a,b <span class="hljs-comment"># torch.Tensor()创建一个默认类型为torch.FloatTensor()的张量,torch.FloatTensor()是CPU中类型</span></code></pre><pre><code>(tensor([1.4013e-45]), tensor([1.4013e-45]))</code></pre><p>使用Python中的list创建tensor张量,或者使用np.array()也可以</p><pre><code class="hljs python">a = torch.tensor([[<span class="hljs-number">1.</span>, <span class="hljs-number">-1.</span>], [<span class="hljs-number">1.</span>, <span class="hljs-number">-1.</span>]]) <span class="hljs-comment"># 注意,这里创建的是内容为1.和-1.的tensor,不是维度,</span>b = torch.tensor(((<span class="hljs-number">1.</span>, <span class="hljs-number">-1.</span>), (<span class="hljs-number">1.</span>, <span class="hljs-number">-1.</span>))) <span class="hljs-comment"># 并且,这里用[]或()都一样</span>a, b</code></pre><pre><code>(tensor([[ 1., -1.],         [ 1., -1.]]), tensor([[ 1., -1.],         [ 1., -1.]]))</code></pre><pre><code class="hljs python">torch.tensor(np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]))</code></pre><pre><code>tensor([[1, 2, 3],        [4, 5, 6]], dtype=torch.int32)</code></pre><p>PS: 使用requires_grad_()或者detach()允许更改requires_grad的标志<br>使用torch.dtype指定类型,使用torch.device指定存储的位置</p><pre><code class="hljs python">torch.zeros([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], dtype=torch.int32)</code></pre><pre><code>tensor([[0, 0, 0, 0],        [0, 0, 0, 0]], dtype=torch.int32)</code></pre><pre><code class="hljs python">cuda = torch.device(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)torch.ones([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], dtype=torch.float64, device=cuda)</code></pre><pre><code>tensor([[1., 1., 1., 1.],        [1., 1., 1., 1.]], device=&#39;cuda:0&#39;, dtype=torch.float64)</code></pre><p>索引:可以使用Python的索引方式</p><pre><code class="hljs python">x = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])print(x)print(x[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])print(x[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])x[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">8</span>print(x)</code></pre><pre><code>tensor([[1, 2, 3],        [4, 5, 6]])tensor(6)tensor(6)tensor([[1, 8, 3],        [4, 5, 6]])</code></pre><p>使用<code>torch.Tensor.item()</code>返回张量的值</p><pre><code class="hljs python">x = torch.tensor([[<span class="hljs-number">1</span>]])print(x)print(x.item())x = torch.tensor(<span class="hljs-number">2.5</span>)print(x)print(x.item())</code></pre><pre><code>tensor([[1]])1tensor(2.5000)2.5</code></pre><p>使用<code>requires_grad=True</code>让tensor张量能够记下操作记录,以致于可以求导</p><pre><code class="hljs python">x = torch.tensor([[<span class="hljs-number">1.</span>, <span class="hljs-number">-1.</span>], [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]], requires_grad=<span class="hljs-literal">True</span>)out = x.pow(<span class="hljs-number">2</span>).sum() <span class="hljs-comment"># out = x^2</span>out.backward() <span class="hljs-comment"># 求导:out = 2 * x</span>print(x.grad)</code></pre><pre><code>tensor([[ 2., -2.],        [ 2.,  2.]])</code></pre><p>NOTE:当需要改变现存的tensor的device时,使用<code>to()</code>方法</p><h1 id="CLASS-torch-Tensor"><a href="#CLASS-torch-Tensor" class="headerlink" title="CLASS torch.Tensor"></a>CLASS torch.Tensor</h1><p>有几种创建tensor的方式</p><ol><li>用上述的<code>torch.tensor()</code>创建</li><li>用torch.*来创建指定size的张量</li><li>用一个张量的size来创建不同类型的张量,使用torch.*_like</li><li>用一个张量的类型创建不同size的张量,使用torch.new_*</li></ol><p>例如:<code>torch.rand(),torch.rand_like(),torch.randn(),torch.randn_like()</code><br><code>,torch.randint(),torch.randint_like(),torch.randperm(),torch.empty() </code></p><h2 id="new-tensor-data"><a href="#new-tensor-data" class="headerlink" title="new_tensor(data)"></a>new_tensor(data)</h2><p>创建一个数据为data其他都为原tensor类型的一个张量</p><pre><code class="hljs python">t = torch.ones((<span class="hljs-number">2</span>, ), dtype=torch.int8)data = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]t.new_tensor(data)</code></pre><pre><code>tensor([[0, 1],        [2, 3]], dtype=torch.int8)</code></pre><h2 id="new-full-size-fill-value"><a href="#new-full-size-fill-value" class="headerlink" title="new_full(size, fill_value)"></a>new_full(size, fill_value)</h2><p>返回一个用fill_value填充的size维度的Tensor,默认返回的dtype和device相同<br>fill_value标量</p><pre><code class="hljs python">t = torch.ones((<span class="hljs-number">2</span>, ), dtype=torch.float64)t.new_full((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), <span class="hljs-number">3.141592</span>)</code></pre><pre><code>tensor([[3.1416, 3.1416, 3.1416, 3.1416],        [3.1416, 3.1416, 3.1416, 3.1416],        [3.1416, 3.1416, 3.1416, 3.1416]], dtype=torch.float64)</code></pre><h2 id="new-empty-size"><a href="#new-empty-size" class="headerlink" title="new_empty(size)"></a>new_empty(size)</h2><p>返回size维度的用随机初始化数据填充的Tensor</p><pre><code class="hljs python">t = torch.ones((<span class="hljs-number">1</span> ))print(t)t.new_empty((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</code></pre><pre><code>tensor([1.])tensor([[0.0000e+00, 0.0000e+00, 1.4013e-45],        [0.0000e+00, 1.4013e-45, 0.0000e+00]])</code></pre><h2 id="new-ones-size"><a href="#new-ones-size" class="headerlink" title="new_ones(size)"></a>new_ones(size)</h2><p>返回一个size维度但是用1填充的Tensor</p><pre><code class="hljs python">t = torch.tensor((<span class="hljs-number">2.</span>))<span class="hljs-comment">#, dtype=torch.int32)</span>print(t.dtype)print(t.new_ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))print(t)</code></pre><pre><code>torch.float32tensor([[1., 1., 1.],        [1., 1., 1.]])tensor(2.)</code></pre><h2 id="new-zeros-size"><a href="#new-zeros-size" class="headerlink" title="new_zeros(size)"></a>new_zeros(size)</h2><p>返回一个size大小用0填充的Tensor</p><pre><code class="hljs python">tensor = torch.tensor((), dtype=torch.float64)tensor.new_zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</code></pre><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]], dtype=torch.float64)</code></pre><h2 id="is-cuda"><a href="#is-cuda" class="headerlink" title="is_cuda()"></a>is_cuda()</h2><p>如果tensor存储在GPU中返回True,否则返回False</p><h2 id="is-quantized"><a href="#is-quantized" class="headerlink" title="is_quantized()"></a>is_quantized()</h2><p>如果tensor是量化的返回True,否则返回False</p><h2 id="device"><a href="#device" class="headerlink" title="device"></a>device</h2><p>返回Tensor存在哪</p><h2 id="grad"><a href="#grad" class="headerlink" title="grad"></a>grad</h2><p>记录求导<code>backward()</code>之后变量的值</p><h2 id="ndim"><a href="#ndim" class="headerlink" title="ndim"></a>ndim</h2><p>dim()的别名,返回的tensor的维度</p><h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><p>返回矩阵的转置</p><pre><code class="hljs python">x = torch.tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])print(x)print(x.T)</code></pre><pre><code>tensor([[0, 1],        [2, 3]])tensor([[0, 2],        [1, 3]])</code></pre><h2 id="abs-abs"><a href="#abs-abs" class="headerlink" title="abs() / abs_()"></a>abs() / abs_()</h2><p>与torch.abs()相同,返回矩阵中元素的绝对值</p><pre><code class="hljs python">torch.tensor([<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">3</span>]).abs()</code></pre><pre><code>tensor([1, 2, 3])</code></pre><h2 id="acos-acos"><a href="#acos-acos" class="headerlink" title="acos() / acos_()"></a>acos() / acos_()</h2><p>与torch.acos()相同,返回arccos反余弦值</p><h2 id="add-other-alpha-1-add"><a href="#add-other-alpha-1-add" class="headerlink" title="add(other, *, alpha=1) / add_()"></a>add(other, *, alpha=1) / add_()</h2><p>与torch.add()相同,返回张量+alpha*other</p><pre><code class="hljs python">x = torch.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))print(x)x.add(<span class="hljs-number">1</span>, alpha=<span class="hljs-number">2</span>)</code></pre><pre><code>tensor([[1., 1., 1.],        [1., 1., 1.]])tensor([[3., 3., 3.],        [3., 3., 3.]])</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNN_Dective_kdd99</title>
    <link href="/2020/03/24/CNN-Dective-kdd99/"/>
    <url>/2020/03/24/CNN-Dective-kdd99/</url>
    
    <content type="html"><![CDATA[<h1 id="PyTorch编程时遇到的问题"><a href="#PyTorch编程时遇到的问题" class="headerlink" title="PyTorch编程时遇到的问题"></a>PyTorch编程时遇到的问题</h1><a id="more"></a><h2 id="num-workers-0"><a href="#num-workers-0" class="headerlink" title="num_workers=0"></a>num_workers=0</h2><p>在windows中使用PyTorch中的dataloader中num_workers大于0或1就会提示：BrokenPipeError错误，这种是因为PyTorch调用了multiprocessing库。<a href="https://discuss.pytorch.org/t/%E3%80%81brokenpipeerror-errno-32-broken-pipe-when-i-run-cifar10-tutorial-py/6224/3">参考</a><br>解决方法：</p><ol><li>将num_workers设置为0或1，也就是不使用多进程</li><li>添加<code>if __name__ == &#39;__main__&#39;:</code>这条语句,windows必须要检测<strong>main</strong>(),否则就会出现错误，参考<a href="https://stackoverflow.com/questions/18204782/runtimeerror-on-windows-trying-python-multiprocessing">错误</a>，但是在jupyter notebook中使用了这条语句，依旧不管用。<h2 id="张量类型需要统一"><a href="#张量类型需要统一" class="headerlink" title="张量类型需要统一"></a>张量类型需要统一</h2>我们在定义张量时，首先dtype设置为普通类型例如：torch.float32,torch.int64,而不是将其设置为CPU tensor或者GPU tensor，并且网络中的参数也需要将其放入当GPU中(如果使用GPU运算的话)。可以使用这条语句net = net.to(device)<h2 id="注意卷积操作的维度"><a href="#注意卷积操作的维度" class="headerlink" title="注意卷积操作的维度"></a>注意卷积操作的维度</h2>在对CNN网络进行训练时，输入数据为维度为(N, C_in, H, W)输入维度为(N, C_out, H_out, W_out)，如果维度对应不上可以使用unsqueeze和squeeze函数对张量进行增维和降维。<h2 id="还有一个问题"><a href="#还有一个问题" class="headerlink" title="还有一个问题"></a>还有一个问题</h2>这个问题比较玄学，我刚开始几次训练时，CNN的识别率一直不动，保持相同的水平，但是在我们测试所有参数类型是否有问题后，并且运行的代码跟之前相比并没有改变什么变量，但是奇怪的时，识别率不仅大幅提高了，而且随着nepochs次数的增加，识别率也在提高，并且每次训练的时间都减少了。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次很多编程上的问题，都没有注意，还得加强编程的训练，并且加强Linux的学习，毕竟在windows中不能使用多进程加载速度是真滴慢。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>PyTorch</tag>
      
      <tag>入侵检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;&lt;基于特征分组聚类的异常入侵检测系统研究&gt;&gt;代码复现</title>
    <link href="/2019/12/02/kdd99/"/>
    <url>/2019/12/02/kdd99/</url>
    
    <content type="html"><![CDATA[<h1 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h1><a id="more"></a><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeanscolumns_names = [<span class="hljs-string">&#x27;duration&#x27;</span>, <span class="hljs-string">&#x27;protocol_type&#x27;</span>, <span class="hljs-string">&#x27;service&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;src_bytes&#x27;</span>, <span class="hljs-string">&#x27;dst_bytes&#x27;</span>, <span class="hljs-string">&#x27;land&#x27;</span>, <span class="hljs-string">&#x27;wrong_fragment&#x27;</span>, <span class="hljs-string">&#x27;urgent&#x27;</span>, <span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;num_failed_logins&#x27;</span>, <span class="hljs-string">&#x27;logged_in&#x27;</span>, <span class="hljs-string">&#x27;num_compromised&#x27;</span>, <span class="hljs-string">&#x27;root_shell&#x27;</span>, <span class="hljs-string">&#x27;su_attempted&#x27;</span>, <span class="hljs-string">&#x27;num_root&#x27;</span>, <span class="hljs-string">&#x27;num_file_creations&#x27;</span>, <span class="hljs-string">&#x27;num_shells&#x27;</span>, <span class="hljs-string">&#x27;num_access_files&#x27;</span>, <span class="hljs-string">&#x27;num_outbound_cmds&#x27;</span>, <span class="hljs-string">&#x27;is_host_login&#x27;</span>, <span class="hljs-string">&#x27;is_guest_login&#x27;</span>, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;srv_count&#x27;</span>, <span class="hljs-string">&#x27;serror_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;same_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;diff_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_diff_host_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_count&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_count&#x27;</span>, <span class="hljs-string">&#x27;dst_host_same_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_diff_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_same_src_port_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_diff_host_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_rerror_rate&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>]df = pd.read_csv(<span class="hljs-string">&#x27;./Sets/kddcup.data_10_percent/kddcup_10_percent.csv&#x27;</span>, names=columns_names)<span class="hljs-comment">#print(df.iloc[:,0:4])</span>kdd_data = df.iloc[:,:<span class="hljs-number">-1</span>]   <span class="hljs-comment"># 保存无标签数据集</span>kdd_target = df.iloc[:,<span class="hljs-number">-1</span>] <span class="hljs-comment"># 保存标签列</span></code></pre><p>输出部分数据，查看是否有误</p><pre><code class="hljs python">print(kdd_data.head())print(kdd_target.head())</code></pre><pre><code>   duration protocol_type service flag  src_bytes  dst_bytes  land  \0         0           tcp    http   SF        181       5450     0   1         0           tcp    http   SF        239        486     0   2         0           tcp    http   SF        235       1337     0   3         0           tcp    http   SF        219       1337     0   4         0           tcp    http   SF        217       2032     0      wrong_fragment  urgent  hot  ...  dst_host_count  dst_host_srv_count  \0               0       0    0  ...               9                   9   1               0       0    0  ...              19                  19   2               0       0    0  ...              29                  29   3               0       0    0  ...              39                  39   4               0       0    0  ...              49                  49      dst_host_same_srv_rate  dst_host_diff_srv_rate  \0                     1.0                     0.0   1                     1.0                     0.0   2                     1.0                     0.0   3                     1.0                     0.0   4                     1.0                     0.0      dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \0                         0.11                          0.0   1                         0.05                          0.0   2                         0.03                          0.0   3                         0.03                          0.0   4                         0.02                          0.0      dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \0                   0.0                       0.0                   0.0   1                   0.0                       0.0                   0.0   2                   0.0                       0.0                   0.0   3                   0.0                       0.0                   0.0   4                   0.0                       0.0                   0.0      dst_host_srv_rerror_rate  0                       0.0  1                       0.0  2                       0.0  3                       0.0  4                       0.0  [5 rows x 41 columns]0    normal.1    normal.2    normal.3    normal.4    normal.Name: result, dtype: object</code></pre><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>1.将类型为：string的列用one-hot编码数值化<br>2.将编码后的数据，再合并到原来的数据中，并且删除原本数据类型为string的列的数据<br>3.再使用最大最小化归一化</p><h2 id="ont-hot编码"><a href="#ont-hot编码" class="headerlink" title="ont-hot编码"></a>ont-hot编码</h2><pre><code class="hljs python">data = pd.get_dummies(df[[<span class="hljs-string">&#x27;protocol_type&#x27;</span>, <span class="hljs-string">&#x27;service&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>]])print(len(data.columns))print(len(df.columns))</code></pre><pre><code>8042</code></pre><h2 id="合并数值化后的数据，删除原来string类型的数据"><a href="#合并数值化后的数据，删除原来string类型的数据" class="headerlink" title="合并数值化后的数据，删除原来string类型的数据"></a>合并数值化后的数据，删除原来string类型的数据</h2><pre><code class="hljs python">kdd_data_comb = pd.merge(kdd_data, data, how=<span class="hljs-string">&#x27;outer&#x27;</span>, left_index=<span class="hljs-literal">True</span>, right_index=<span class="hljs-literal">True</span>)print(kdd_data_comb.shape)<span class="hljs-comment"># print(list(kdd_data_comb.columns))</span><span class="hljs-comment"># print(list(kdd_data.columns))</span><span class="hljs-comment"># print(kdd_data.head())</span>kdd_data_comb = kdd_data_comb.drop(columns=[<span class="hljs-string">&#x27;protocol_type&#x27;</span>, <span class="hljs-string">&#x27;service&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>])</code></pre><pre><code>(494021, 121)</code></pre><h2 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> MinMaxScalerscale = MinMaxScaler().fit(kdd_data_comb)kdd_dataScale = scale.transform(kdd_data_comb)</code></pre><h1 id="KMeans降维"><a href="#KMeans降维" class="headerlink" title="KMeans降维"></a>KMeans降维</h1><p>这里将数据按照论文中的方式，将数据集划分为4组，然后对每一组作Kmeans聚类</p><pre><code class="hljs python">model1 = KMeans(n_clusters=<span class="hljs-number">10</span>).fit(kdd_data_comb.loc[:,[<span class="hljs-string">&#x27;duration&#x27;</span>, <span class="hljs-string">&#x27;protocol_type_icmp&#x27;</span>, <span class="hljs-string">&#x27;protocol_type_tcp&#x27;</span>, <span class="hljs-string">&#x27;protocol_type_udp&#x27;</span>, <span class="hljs-string">&#x27;service_IRC&#x27;</span>, <span class="hljs-string">&#x27;service_X11&#x27;</span>, <span class="hljs-string">&#x27;service_Z39_50&#x27;</span>, <span class="hljs-string">&#x27;service_auth&#x27;</span>, <span class="hljs-string">&#x27;service_bgp&#x27;</span>, <span class="hljs-string">&#x27;service_courier&#x27;</span>, <span class="hljs-string">&#x27;service_csnet_ns&#x27;</span>, <span class="hljs-string">&#x27;service_ctf&#x27;</span>, <span class="hljs-string">&#x27;service_daytime&#x27;</span>, <span class="hljs-string">&#x27;service_discard&#x27;</span>, <span class="hljs-string">&#x27;service_domain&#x27;</span>, <span class="hljs-string">&#x27;service_domain_u&#x27;</span>, <span class="hljs-string">&#x27;service_echo&#x27;</span>, <span class="hljs-string">&#x27;service_eco_i&#x27;</span>, <span class="hljs-string">&#x27;service_ecr_i&#x27;</span>, <span class="hljs-string">&#x27;service_efs&#x27;</span>, <span class="hljs-string">&#x27;service_exec&#x27;</span>, <span class="hljs-string">&#x27;service_finger&#x27;</span>, <span class="hljs-string">&#x27;service_ftp&#x27;</span>, <span class="hljs-string">&#x27;service_ftp_data&#x27;</span>, <span class="hljs-string">&#x27;service_gopher&#x27;</span>, <span class="hljs-string">&#x27;service_hostnames&#x27;</span>, <span class="hljs-string">&#x27;service_http&#x27;</span>, <span class="hljs-string">&#x27;service_http_443&#x27;</span>, <span class="hljs-string">&#x27;service_imap4&#x27;</span>, <span class="hljs-string">&#x27;service_iso_tsap&#x27;</span>, <span class="hljs-string">&#x27;service_klogin&#x27;</span>, <span class="hljs-string">&#x27;service_kshell&#x27;</span>, <span class="hljs-string">&#x27;service_ldap&#x27;</span>, <span class="hljs-string">&#x27;service_link&#x27;</span>, <span class="hljs-string">&#x27;service_login&#x27;</span>, <span class="hljs-string">&#x27;service_mtp&#x27;</span>, <span class="hljs-string">&#x27;service_name&#x27;</span>, <span class="hljs-string">&#x27;service_netbios_dgm&#x27;</span>, <span class="hljs-string">&#x27;service_netbios_ns&#x27;</span>, <span class="hljs-string">&#x27;service_netbios_ssn&#x27;</span>, <span class="hljs-string">&#x27;service_netstat&#x27;</span>, <span class="hljs-string">&#x27;service_nnsp&#x27;</span>, <span class="hljs-string">&#x27;service_nntp&#x27;</span>, <span class="hljs-string">&#x27;service_ntp_u&#x27;</span>, <span class="hljs-string">&#x27;service_other&#x27;</span>, <span class="hljs-string">&#x27;service_pm_dump&#x27;</span>, <span class="hljs-string">&#x27;service_pop_2&#x27;</span>, <span class="hljs-string">&#x27;service_pop_3&#x27;</span>, <span class="hljs-string">&#x27;service_printer&#x27;</span>, <span class="hljs-string">&#x27;service_private&#x27;</span>, <span class="hljs-string">&#x27;service_red_i&#x27;</span>, <span class="hljs-string">&#x27;service_remote_job&#x27;</span>, <span class="hljs-string">&#x27;service_rje&#x27;</span>, <span class="hljs-string">&#x27;service_shell&#x27;</span>, <span class="hljs-string">&#x27;service_smtp&#x27;</span>, <span class="hljs-string">&#x27;service_sql_net&#x27;</span>, <span class="hljs-string">&#x27;service_ssh&#x27;</span>, <span class="hljs-string">&#x27;service_sunrpc&#x27;</span>, <span class="hljs-string">&#x27;service_supdup&#x27;</span>, <span class="hljs-string">&#x27;service_systat&#x27;</span>, <span class="hljs-string">&#x27;service_telnet&#x27;</span>, <span class="hljs-string">&#x27;service_tftp_u&#x27;</span>, <span class="hljs-string">&#x27;service_tim_i&#x27;</span>, <span class="hljs-string">&#x27;service_time&#x27;</span>, <span class="hljs-string">&#x27;service_urh_i&#x27;</span>, <span class="hljs-string">&#x27;service_urp_i&#x27;</span>, <span class="hljs-string">&#x27;service_uucp&#x27;</span>, <span class="hljs-string">&#x27;service_uucp_path&#x27;</span>, <span class="hljs-string">&#x27;service_vmnet&#x27;</span>, <span class="hljs-string">&#x27;service_whois&#x27;</span>, <span class="hljs-string">&#x27;flag_OTH&#x27;</span>, <span class="hljs-string">&#x27;flag_REJ&#x27;</span>, <span class="hljs-string">&#x27;flag_RSTO&#x27;</span>, <span class="hljs-string">&#x27;flag_RSTOS0&#x27;</span>, <span class="hljs-string">&#x27;flag_RSTR&#x27;</span>, <span class="hljs-string">&#x27;flag_S0&#x27;</span>, <span class="hljs-string">&#x27;flag_S1&#x27;</span>, <span class="hljs-string">&#x27;flag_S2&#x27;</span>, <span class="hljs-string">&#x27;flag_S3&#x27;</span>, <span class="hljs-string">&#x27;flag_SF&#x27;</span>, <span class="hljs-string">&#x27;flag_SH&#x27;</span>, <span class="hljs-string">&#x27;src_bytes&#x27;</span>, <span class="hljs-string">&#x27;dst_bytes&#x27;</span>, <span class="hljs-string">&#x27;land&#x27;</span>, <span class="hljs-string">&#x27;wrong_fragment&#x27;</span>, <span class="hljs-string">&#x27;urgent&#x27;</span>]])model2 = KMeans(n_clusters=<span class="hljs-number">10</span>).fit(kdd_data_comb.loc[:,[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;num_failed_logins&#x27;</span>, <span class="hljs-string">&#x27;logged_in&#x27;</span>, <span class="hljs-string">&#x27;num_compromised&#x27;</span>, <span class="hljs-string">&#x27;root_shell&#x27;</span>, <span class="hljs-string">&#x27;su_attempted&#x27;</span>, <span class="hljs-string">&#x27;num_root&#x27;</span>, <span class="hljs-string">&#x27;num_file_creations&#x27;</span>, <span class="hljs-string">&#x27;num_shells&#x27;</span>, <span class="hljs-string">&#x27;num_access_files&#x27;</span>, <span class="hljs-string">&#x27;num_outbound_cmds&#x27;</span>, <span class="hljs-string">&#x27;is_host_login&#x27;</span>, <span class="hljs-string">&#x27;is_guest_login&#x27;</span>]])model3 = KMeans(n_clusters=<span class="hljs-number">10</span>).fit(kdd_data_comb.loc[:,[<span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;srv_count&#x27;</span>, <span class="hljs-string">&#x27;serror_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;same_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;diff_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;srv_diff_host_rate&#x27;</span>]])model4 = KMeans(n_clusters=<span class="hljs-number">10</span>).fit(kdd_data_comb.loc[:,[<span class="hljs-string">&#x27;dst_host_count&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_count&#x27;</span>, <span class="hljs-string">&#x27;dst_host_same_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_diff_srv_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_same_src_port_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_diff_host_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_serror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_rerror_rate&#x27;</span>, <span class="hljs-string">&#x27;dst_host_srv_rerror_rate&#x27;</span>]])</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npnp.unique(model1.labels_) <span class="hljs-comment"># 这里显示聚类结果中所有的值，如果只是打印出来，看不到除0以外的其他值</span></code></pre><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><pre><code class="hljs python">sizes = [(model1.labels_ == i).sum() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>) ] <span class="hljs-comment">#每块值</span>print(sizes)print(len(model1.labels_))</code></pre><pre><code>[491472, 1, 59, 16, 24, 21, 6, 77, 2343, 2]494021</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.figure(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">9</span>)) <span class="hljs-comment">#调节图形大小</span>labels = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>] <span class="hljs-comment">#定义标签</span><span class="hljs-comment"># sizes = [i for i in range(10): model1.labels_ == i] #每块值</span>explode = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">#将某一块分割出来，值越大分割出的间隙越大</span>patches,text1,text2 = plt.pie(sizes,                      explode=explode,                      labels=labels,                      autopct = <span class="hljs-string">&#x27;%3.2f%%&#x27;</span>, <span class="hljs-comment">#数值保留固定小数位</span>                      shadow = <span class="hljs-literal">False</span>, <span class="hljs-comment">#无阴影设置</span>                      startangle =<span class="hljs-number">90</span>, <span class="hljs-comment">#逆时针起始角度设置</span>                      pctdistance = <span class="hljs-number">0.6</span>) <span class="hljs-comment">#数值距圆心半径倍数距离</span><span class="hljs-comment">#patches饼图的返回值，texts1饼图外label的文本，texts2饼图内部的文本</span><span class="hljs-comment"># x，y轴刻度设置一致，保证饼图为圆形</span>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)plt.show()</code></pre><pre><code>&lt;Figure size 600x900 with 1 Axes&gt;</code></pre><h2 id="合并降维后的数据"><a href="#合并降维后的数据" class="headerlink" title="合并降维后的数据"></a>合并降维后的数据</h2><p>可以看到数据经过kmeans降维后，数据集就变成了只有4维的数据了</p><pre><code class="hljs python">data_kmeansed = pd.DataFrame(&#123;<span class="hljs-string">&#x27;model1&#x27;</span>: model1.labels_, <span class="hljs-string">&#x27;model2&#x27;</span>: model2.labels_, <span class="hljs-string">&#x27;model3&#x27;</span>: model3.labels_, <span class="hljs-string">&#x27;model4&#x27;</span>: model4.labels_&#125;, columns=[<span class="hljs-string">&#x27;model1&#x27;</span>, <span class="hljs-string">&#x27;model2&#x27;</span>, <span class="hljs-string">&#x27;model3&#x27;</span>, <span class="hljs-string">&#x27;model4&#x27;</span>])print(data_kmeansed.head())print(data_kmeansed.shape)</code></pre><pre><code>   model1  model2  model3  model40       0       4       2       31       0       4       2       32       0       4       2       33       0       4       2       34       0       4       2       3(494021, 4)</code></pre><pre><code class="hljs python"><span class="hljs-comment"># data_kmeansed_onehot = pd.get_dummies(data_kmeansed[[&#x27;model1&#x27;, &#x27;model2&#x27;, &#x27;model3&#x27;, &#x27;model4&#x27;]])</span><span class="hljs-comment"># print(pd.get_dummies(data_kmeansed[[&#x27;model1&#x27;, &#x27;model2&#x27;, &#x27;model3&#x27;, &#x27;model4&#x27;]]).head()) # 可以看到这里对数据值数据进行one-hot编码数值不变</span></code></pre><h2 id="标签处理"><a href="#标签处理" class="headerlink" title="标签处理"></a>标签处理</h2><p>该模型只对5种大类型的攻击方式进行预测，但是数据集中原标签全是小类型，需要将小类型的标签，根据攻击方式的不同划分到大类型中</p><pre><code class="hljs python">np.unique(kdd_target) <span class="hljs-comment"># 显示当前标签中的值</span></code></pre><pre><code>array([&#39;back.&#39;, &#39;buffer_overflow.&#39;, &#39;ftp_write.&#39;, &#39;guess_passwd.&#39;,       &#39;imap.&#39;, &#39;ipsweep.&#39;, &#39;land.&#39;, &#39;loadmodule.&#39;, &#39;multihop.&#39;,       &#39;neptune.&#39;, &#39;nmap.&#39;, &#39;normal.&#39;, &#39;perl.&#39;, &#39;phf.&#39;, &#39;pod.&#39;,       &#39;portsweep.&#39;, &#39;rootkit.&#39;, &#39;satan.&#39;, &#39;smurf.&#39;, &#39;spy.&#39;, &#39;teardrop.&#39;,       &#39;warezclient.&#39;, &#39;warezmaster.&#39;], dtype=object)</code></pre><pre><code class="hljs python">kdd_target_test = kdd_target.copy(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 深度复制</span></code></pre><pre><code class="hljs python"><span class="hljs-comment"># 做个映射将标签中的小类，按照先验知识划分为5个大类</span></code></pre><pre><code class="hljs python"><span class="hljs-comment"># print(kdd_target_test[kdd_target_test==&#x27;Dos&#x27;].head())</span>print(np.unique(kdd_target))</code></pre><pre><code>[&#39;Dos&#39; &#39;R2L&#39; &#39;U2R&#39; &#39;normal&#39; &#39;probe&#39;]</code></pre><p>替换</p><pre><code class="hljs python">Dos_target = &#123;<span class="hljs-string">&#x27;back.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;neptune.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;pod.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;smurf.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;land.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;teardrop.&#x27;</span>:<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;normal.&#x27;</span>:<span class="hljs-string">&#x27;normal&#x27;</span>,<span class="hljs-string">&#x27;ipsweep.&#x27;</span>:<span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;nmap.&#x27;</span>:<span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;portsweep.&#x27;</span>:<span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;satan.&#x27;</span>:<span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;ftp_write.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;guess_passwd.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;imap.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;multihop.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;phf.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;spy.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;warezclient.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;warezmaster.&#x27;</span>:<span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;buffer_overflow.&#x27;</span>:<span class="hljs-string">&#x27;U2R&#x27;</span>, <span class="hljs-string">&#x27;loadmodule.&#x27;</span>:<span class="hljs-string">&#x27;U2R&#x27;</span>, <span class="hljs-string">&#x27;perl.&#x27;</span>:<span class="hljs-string">&#x27;U2R&#x27;</span>, <span class="hljs-string">&#x27;rootkit.&#x27;</span>:<span class="hljs-string">&#x27;U2R&#x27;</span>&#125;kdd_target = kdd_target_test.map(Dos_target)</code></pre><h1 id="决策树做训练"><a href="#决策树做训练" class="headerlink" title="决策树做训练"></a>决策树做训练</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> treetree_model = tree.DecisionTreeClassifier(criterion=<span class="hljs-string">&#x27;entropy&#x27;</span>,random_state=<span class="hljs-number">30</span>)<span class="hljs-comment"># criterion=&#x27;entropy&#x27;调用的就是C4.5算法，默认是CART</span>tree_model.fit(data_kmeansed, kdd_target)</code></pre><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&#39;entropy&#39;, max_depth=None,                       max_features=None, max_leaf_nodes=None,                       min_impurity_decrease=0.0, min_impurity_split=None,                       min_samples_leaf=1, min_samples_split=2,                       min_weight_fraction_leaf=0.0, presort=False,                       random_state=30, splitter=&#39;best&#39;)</code></pre><pre><code class="hljs python"><span class="hljs-comment"># data_kmeansed.isnull().sum()</span></code></pre><pre><code>model1    0model2    0model3    0model4    0dtype: int64</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_scorenormal_data = data_kmeansed[kdd_target == <span class="hljs-string">&#x27;normal&#x27;</span>]print(normal_data.shape)</code></pre><pre><code>(97278, 4)</code></pre><pre><code class="hljs python">back_predict = tree_model.predict(normal_data)</code></pre><p>计算各个类的预测成功率</p><pre><code class="hljs python">y_data = []target = [<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;U2R&#x27;</span>,<span class="hljs-string">&#x27;normal&#x27;</span>]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target:    data1 = data_kmeansed[kdd_target == i]    back_predict = tree_model.predict(data1)    y_data.append(accuracy_score(kdd_target[kdd_target == i], back_predict))</code></pre><pre><code class="hljs python">y_data</code></pre><pre><code>[0.9955167604187423, 0.4390065741417093, 0.325044404973357, 0.038461538461538464, 0.9968852155677542]</code></pre><p>各个类的检测率的可视化</p><pre><code class="hljs python">x_data = [<span class="hljs-string">&#x27;Dos&#x27;</span>, <span class="hljs-string">&#x27;probe&#x27;</span>, <span class="hljs-string">&#x27;R2L&#x27;</span>, <span class="hljs-string">&#x27;U2R&#x27;</span>, <span class="hljs-string">&#x27;normal&#x27;</span>]bar_width = <span class="hljs-number">0.3</span>plt.bar(x=x_data, height=y_data, label=<span class="hljs-string">&#x27;检测正确率&#x27;</span>, color=<span class="hljs-string">&#x27;steelblue&#x27;</span>, alpha=<span class="hljs-number">0.8</span>, width=bar_width)plt.xticks(x_data)plt.show()</code></pre><p><img src="/images/output_35_0.png" alt="output_35_0"></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrixdata1 = data_kmeansedkdd_predict = tree_model.predict(data1)pd.DataFrame(    confusion_matrix(kdd_target, kdd_predict),     columns=[<span class="hljs-string">&#x27;预测Dos&#x27;</span>, <span class="hljs-string">&#x27;预测probe&#x27;</span>, <span class="hljs-string">&#x27;预测R2L&#x27;</span>, <span class="hljs-string">&#x27;预测U2R&#x27;</span>, <span class="hljs-string">&#x27;预测normal&#x27;</span>],    index=[<span class="hljs-string">&#x27;实际Dos&#x27;</span>, <span class="hljs-string">&#x27;实际probe&#x27;</span>, <span class="hljs-string">&#x27;实际R2L&#x27;</span>, <span class="hljs-string">&#x27;实际U2R&#x27;</span>,<span class="hljs-string">&#x27;实际normal&#x27;</span>])</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>预测Dos</th>      <th>预测probe</th>      <th>预测R2L</th>      <th>预测U2R</th>      <th>预测normal</th>    </tr>  </thead>  <tbody>    <tr>      <td>实际Dos</td>      <td>389703</td>      <td>0</td>      <td>0</td>      <td>1746</td>      <td>9</td>    </tr>    <tr>      <td>实际probe</td>      <td>0</td>      <td>366</td>      <td>0</td>      <td>760</td>      <td>0</td>    </tr>    <tr>      <td>实际R2L</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>50</td>      <td>0</td>    </tr>    <tr>      <td>实际U2R</td>      <td>225</td>      <td>28</td>      <td>0</td>      <td>96975</td>      <td>50</td>    </tr>    <tr>      <td>实际normal</td>      <td>264</td>      <td>0</td>      <td>0</td>      <td>2040</td>      <td>1803</td>    </tr>  </tbody></table></div><h1 id="计算F1的值"><a href="#计算F1的值" class="headerlink" title="计算F1的值"></a>计算F1的值</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> f1_scoreprint(f1_score(kdd_target, kdd_predict, average=<span class="hljs-literal">None</span>))</code></pre><pre><code>[0.99712915 0.48157895 0.07407407 0.97536322 0.60412129]</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MachineLearning</tag>
      
      <tag>IDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通用ShellCode</title>
    <link href="/2019/06/25/%E9%80%9A%E7%94%A8shellcode/"/>
    <url>/2019/06/25/%E9%80%9A%E7%94%A8shellcode/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8703da56f848118753210c175a4e7fb25b0bd8f81985036bb681065ef59fa705"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>shellcode</tag>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
